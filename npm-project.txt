ALUSTA NODE-PROJEKTI

npm init

-----------------------------------------------------
RAKENNE

├── index.js
├── app.js
├── build
│   ├── ...
├── controllers
│   └── notes.js
├── models
│   └── note.js
├── package-lock.json
├── package.json
├── utils
│   ├── logger.js
│   ├── config.js
│   └── middleware.js

-----------------------------------------------------
MUOKKAA PACKAGE.JSONia

package.json:
"scripts": {
    "start": "node index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  }

-----------------------------------------------------
EXPRESS

npm install express --save

-----------------------------------------------------
JOS ONGELMIA KIRJASTOJEN KANSSA

(npm update)
(jos joskus pitää poistaa ladattuja, poista node_modules ja package.json,
sitten npm install)

-----------------------------------------------------
DEVAUSAJO-HELPPI (suorita ohjelmaa ja muutokset päivittyy heti)

npm install --save-dev nodemon
Jos nodemon-riippuvuus menee normaaliin "dependencies"-ryhmään, lisää deviinkin:
"dependencies": {
    "express": "^4.17.1",
  },
  "devDependencies": {
    "nodemon": "^2.0.2"
  }

package.json:
"scripts": {
    //..
    "dev": "nodemon index.js",
},
  // ..
}

-----------------------------------------------------
OHJELMAN AJO

Aja: npm run dev
->  http://localhost:<portti>

-----------------------------------------------------

npm install morgan

npm install cors --save

-----------------------------------------------------
PROCFILE HEROKUA VARTEN / HEROKU

Procfile: web: node index.js

heroku create <app-name>
git commit --allow-empty -m "heroku"
git push heroku master

-----------------------------------------------------
FRONTEND BACKENDIIN + SCRIPT-HELPIT

FRONTEND tuotantoversio:
npm run build
(copy to backend)

{
  "scripts": {
    // ...
    "build:ui": "rm -rf build && cd ../../osa2/materiaali/notes-new && npm run build --prod && cp -r build ../../../osa3/notes-backend/",
    "deploy": "git push heroku master",
    "deploy:full": "npm run build:ui && git add . && git commit -m 'uibuild' && git push && npm run deploy",    
    "logs:prod": "heroku logs --tail"
  }
}

npm run build:ui

TAI (build.ui + deploy):
npm run deploy:full

"proxy": "http://localhost:3001"

-----------------------------------------------------
DEBUG

Debug in Chrome:
node --inspect index.js

-----------------------------------------------------
MONGO CONNECTION

MongoDB connection string:
mongodb+srv://jariDB:jmsMdb2%23@cluster0-wnvyv.mongodb.net/bloglist-app?retryWrites=true&w=majority
TAI
mongodb+srv://jariDB:jmsMdb2%23@cluster0-wnvyv.mongodb.net/bloglist-app?retryWrites=true&w=majority

-----------------------------------------------------
MONGOOSE + VALIDATORS

npm install mongoose --save

npm install --save mongoose-unique-validator

-----------------------------------------------------
DOTENV FOR MONGO PASSWORD

npm install dotenv --save
.env:
MONGODB_URI=mongodb+srv://jariDB:jmsMdb2%23@cluster0-wnvyv.mongodb.net/bloglist-app?retryWrites=true&w=majority

heroku config:set MONGODB_URI=mongodb+srv://jariDB:jmsMdb2%23@cluster0-wnvyv.mongodb.net/bloglist-app?retryWrites=true&w=majority

-----------------------------------------------------
LINT

BACKEND:
npm install eslint --save-dev
node_modules/.bin/eslint --init
"scripts": {
    // ...
    "lint": "eslint ."
  // ...
}
npm run lint

-----------------------------------------------------

syötä arvoja mongolla:
node mongo.js jmsMdb2# "Jonkun vaan ploki" "Joku Vaan" "http://nytteniijjoo.com" 56

Tulosta blogit mongolla:
node mongo.js jmsMdb2#

-----------------------------------------------------
TESTAUS

npm install --save-dev jest

npm test (kaikki testit)

npm test -- -t 'testin nimi' (yksi testi)

JEST-DEBUGGAUS
Place a debugger; statement in any of your tests, and then,
in your project's directory, run:

node --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]
or on Windows
node --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]

sitten Chromessa:

chrome://inspect -> click on "Open Dedicated DevTools for Node"

tai

node --inspect index.js

---------------

TAI VS CODESSA:

node --inspect-brk node_modules/.bin/jest --runInBand [any other arguments here]
or on Windows
node --inspect-brk ./node_modules/jest/bin/jest.js --runInBand [any other arguments here]

launch.json config:

{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "node",
      "request": "attach",
      "name": "Attach",
      "port": 9229
    }
  ]
}

TAI

VS CODEEn pysyvät configit:

launch.json config (backend):

{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug Jest Tests",
      "type": "node",
      "request": "launch",
      "runtimeArgs": [
        "--inspect-brk",
        "${workspaceRoot}/node_modules/jest/bin/jest.js",
        "--runInBand"
      ],
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "port": 9229
    }
  ]
}

launch.json config (frontend, eli kun luotu create-react-app):

{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug CRA Tests",
      "type": "node",
      "request": "launch",
      "runtimeExecutable": "${workspaceRoot}/node_modules/.bin/react-scripts",
      "args": ["test", "--runInBand", "--no-cache", "--env=jsdom"],
      "cwd": "${workspaceRoot}",
      "protocol": "inspector",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen"
    }
  ]
}

-----------------------------------------------------
ARRAY MANIPULATIONS

npm i --save lodash

